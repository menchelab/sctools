import gzip

import anndata as ad
import pandas as pd
import scanpy as sc
import numpy as np

from scipy.io import mmread, mmwrite


def read_sc_data(
    counts_file, 
    features_file,
    metadata_file
):
    '''
    read scRNA-seq data from mtx and accompanying meta data files as generated by 10x cellranger
    all files can either be plain text or gzipped files

    :param counts_file:    matrix market file containig count data
    :param features_file:  gene/feature metadata (i.e. var metadata)
    :param metadata_file:  cell metadata (i.e. obs metadata)

    :return:               anndata.AnnData object containing the read data
    '''
    data_dict = {}
    for key, filename in zip(
        ['counts', 'features', 'metadata'],
        [counts_file, features_file, metadata_file]
    ):
        if filename.endswith('gz'):
            open_file = lambda x: gzip.open(x, 'rt')
            
        else: 
            open_file = lambda x: open(x, 'r')
            
        with open_file(filename) as file:
            if key == 'counts':
                # transpose due to the way the data was exported to comply with Seurat
                # see also convert_to_raw.ipynb
                data = mmread(file).T.tocsr()
                
            elif key == 'metadata':
                data = pd.read_csv(
                    file,
                    sep = '\t',
                    index_col = 0
                )
            
            else:
                data = pd.DataFrame(
                    index = file.read().rstrip().split()
                )
            
        data_dict[key] = data

    adata = ad.AnnData(
        X = data_dict['counts'],
        obs = data_dict['metadata'],
        var = data_dict['features'],
        dtype = np.int64
    )
    return adata


def initialize_from_raw(file_or_adata):
    '''
    reinitializes an AnnData object from .raw slot retaining all information saved in obs
    and returns the reinitialized data

    :param file_or_adata:    either a path to an h5ad file or an AnnData object (if path first reads the file and then reinitializes)

    :return:                 reinitialized AnnData object
    '''
    if isinstance(file_or_adata, ad.AnnData):
        adata = file_or_adata
    
    else:
        adata = sc.read_h5ad(file_or_adata)

    obs = adata.obs.copy()
    var = adata.raw.var.copy()
    adata = ad.AnnData(
        X = adata.raw.X,
        obs = obs,
        var = var,
        dtype = np.int64
    )
    return adata


def write_sc_data(adata, outfile_prefix, layer = None, obs_columns = None, var_columns = None):
    '''
    utility function to write AnnData object to 10x plain file output (i.e. mtx + metadata tsvs)

    :param adata:            AnnData to write to 10x plain files
    :param outfile_prefix:   prefix of the files to be generated
    :param layer:            layer to write data from
    :param obs_columns:      list of strings denoting the obs columns to write to obs.tsv
    :param var_columns:      list of strings denoting the var columns to write to var.tsv

    :return:                 None
    '''
    obs = adata.obs
    var = adata.var
    X = adata.layers[layer] if layer else adata.X
    if not isinstance(obs_columns, type(None)):
        obs = obs.loc[:, obs_columns]

    if not isinstance(var_columns, type(None)):
        var = var.loc[:, var_columns]

    mmwrite(
        '.'.join([outfile_prefix, layer if layer else 'X', 'mtx']),
        X
    )
    obs.to_csv(
        '.'.join([outfile_prefix, 'obs.tsv']),
        sep = '\t'
    )
    var.to_csv(
        '.'.join([outfile_prefix, 'var.tsv']),
        sep = '\t'
    )
